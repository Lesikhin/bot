
# === –ù–ê–°–¢–†–û–ô–ö–ò ===
#TELEGRAM_TOKEN = "XXX"  # –ó–∞–º–µ–Ω–∏
#HF_TOKEN = "YYY"    # –ó–∞–º–µ–Ω–∏

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import json
import time


# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô ID –ú–û–î–ï–õ–ò
MODEL_ID = "IlyaGusev/saiga_mistral_7b"
API_URL = f"https://api-inference.huggingface.co/models/{MODEL_ID}"

headers = {"Authorization": f"Bearer {HF_TOKEN}"}
dialogues = {}

# === üîÑ –ó–∞–ø—Ä–æ—Å –∫ API ===
def query(payload):
    for _ in range(10):
        try:
            response = requests.post(API_URL, headers=headers, json=payload, timeout=60)
            print(f"üîπ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üîπ –û—Ç–≤–µ—Ç: {response.text[:500]}...")

            # ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            if response.status_code == 200:
                try:
                    return response.json()
                except json.JSONDecodeError:
                    return {"error": "Invalid JSON", "details": response.text}

            # ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
            elif response.status_code == 503:
                try:
                    wait = response.json().get("estimated_time", 30)
                except:
                    wait = 30
                print(f"‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –∂–¥—ë–º {wait} —Å–µ–∫.")
                time.sleep(wait)
                continue

            # ‚ùå –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            else:
                try:
                    error = response.json().get("error", response.text)
                except:
                    error = response.text
                return {"error": f"HTTP {response.status_code}", "details": error}

        except Exception as e:
            print(f"üåê –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)
            continue

    return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", "details": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫."}

# === ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    dialogues[chat_id] = []
    await update.message.reply_text(
        "üá∑üá∫ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –º–æ–¥–µ–ª–∏ Saiga-Mistral.\n"
        "–ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text

    if chat_id not in dialogues:
        dialogues[chat_id] = []

    await update.message.reply_text("üß† –î—É–º–∞—é...")

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ —à–∞–±–ª–æ–Ω—É Saiga
        prompt_lines = []
        for turn in dialogues[chat_id][-3:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ–±–º–µ–Ω–∞
            prompt_lines.append(f"### –£—Å–ª–æ–≤–∏–µ: {turn['user']}")
            prompt_lines.append(f"### –û—Ç–≤–µ—Ç: {turn['bot']}")
        
        prompt_lines.append(f"### –£—Å–ª–æ–≤–∏–µ: {user_message}")
        prompt_lines.append("### –û—Ç–≤–µ—Ç:")
        prompt = "\n".join(prompt_lines)

        payload = {
            "inputs": prompt,
            "parameters": {
                "max_new_tokens": 512,
                "temperature": 0.7,
                "top_p": 0.9,
                "do_sample": True,
                "return_full_text": False
            }
        }

        output = query(payload)

        if "error" in output:
            details = str(output.get("details", ""))
            if "currently loading" in details:
                bot_reply = "ü§ñ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1‚Äì2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            elif "authorization" in details.lower():
                bot_reply = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω."
            else:
                bot_reply = f"‚ùå –û—à–∏–±–∫–∞: {output['error']}"
        elif isinstance(output, dict) and "generated_text" in output:
            bot_reply = output["generated_text"].strip()
        else:
            bot_reply = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

        dialogues[chat_id].append({"user": user_message, "bot": bot_reply})
        await update.message.reply_text(bot_reply)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print("–û—à–∏–±–∫–∞:", e)

# === ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ ===
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1‚Äì2 –º–∏–Ω.")
    app.run_polling()

if __name__ == "__main__":

    main()
